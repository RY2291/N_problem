N + 1対策メソッド

joins
  関連モデルにある属性で絞り込みたい場合は、joinsを使う事でN + 1問題を解決出来る
  文字列で生のSQLを指定可
    モデル名.joins(:関連名)

left_outer_joins
  関連テーブルにレコードが存在しない場合にも結合元のレコードは全て取得する
  文字列で生のSQLは指定不可
    モデル名.left_outer_joins(:関連名)

eager_load
  関連モデルにある属性をループの中で取得したい場合に使用する。
  SQLのLEFT OUTER JOIN句で取得した関連モデルのデータをメモリに一時保存する事で、
  その後に関連付けでデータ取得する際にメモリからデータ取得を行う為、SQL発行がされなくなりN+1が解消される。
    モデル名.eager_load(:関連名)

  ・メリット
    JOIN句を使う為、関連テーブルでの絞り込みが可能になりSQL発行が1回で済む

  ・デメリット
    リレーショナルデータベース(RDB)ではJOIN句は処理に時間が掛かり、データサイズやレコード数の量によって
    処理が遅くなる場合がある。

preload
  SELECT句をモデル毎に発行し関連付けをキャッシュする。
  関連テーブルでの絞り込み条件を指定する事は不可能
    モデル名.preload(:関連名)

  ・メリット
    関連モデル毎にSQLを発行する為、eagar_loadで発生するJOIN句特有の問題を回避できる。
  ・デメリット
    SQLを関連モデル毎に発行する為eager_loadよりもSQL発行回数が多くなってしまいます。



SQL発行にあたり、キャッシュが必要であるか
  
  関連テーブルでの絞り込みのみを行いたい　=> joins, left_outer_joins

  ループ内で関連テーブルの値を使用する => preload, eager_load